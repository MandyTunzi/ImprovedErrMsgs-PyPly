Mandisa Tunzi
2023
UCT Computer Science Honours Project : Improved Error Messages

# Error Message Processing Package

This Python package provides a comprehensive solution for processing and improving error messages generated during the execution
of Python code. It includes a set of components that work together to extract, structure, and enhance error messages. This README
provides an overview of the package and details on how to use its functions.


# Package Components

1. Lexical Analyzer (lexing_mech.py)

The Lexical Analyzer, implemented in lexing_mech.py, is responsible for recognizing individual elements within an input error message.
It uses tokenization, facilitated by the "ply.lex" module in Python, to break the input message into discrete units known as tokens.
Each token corresponds to a specific element within the error message and is tagged with a token type. The lexing mechanism employs a
set of predefined regular expressions to match patterns representing various elements, such as types, variables, functions, operators,
and other information typically found in a standard Python error message.

The lexer recognizes the following key elements:

[FILENAME]: Signifying the file name where the error occurred.
[LINENUMBER]: Indicating the specific line number within the file where the error was triggered.
[OFFENDING_LINE]: Representing the line of code that caused the error.
[TYPE]: Denoting Python type names like 'int', 'float', 'str' within the error message.
[FUNCTION]: Indicating function calls.
[OPERATOR]: Representing various operator symbols like '+', '-'.
[NUMBER]: Portraying numeric values.
[VALUE]: Denoting numeric values enclosed in quotation marks (string numeric values).
[SUGGESTION]: Conveying sentences, actions, or recommendations.


2. Parser (parsing_mech.py)

The Parser, implemented in parsing_mech.py, processes the tokenized input generated by the lexer. This parsing process involves applying
grammar rules and invoking specialized handler functions to comprehend the structure of the error message and extract meaningful components.
The ply.yacc module in Python is utilized for this purpose.

The parsing mechanism starts with the reception of tokens from the lexer, each associated with a specific token type. Predefined grammar
rules, expressed as context-free productions, govern the hierarchical arrangement of elements within an error message. Adhering to these
rules, the parser constructs a structured representation of the error message.

Specialized handler functions are triggered as the parser processes tokens, and these functions extract relevant information from the
token content. The output of the parsing mechanism is a structured representation in the form of a list of tuples. Each tuple pairs the
extracted content with its corresponding token type.

For example, given the error message:

Traceback (most recent call last):
File "example.py", line 1, <in module>
print (Mandisa)
NameError: name 'Mandisa' is not defined

The structured representation is:

('example.py', 'FILENAME'),
(2, 'LINENUMBER'),
('print(Mandisa)', 'OFFENDING_LINE'),
('NameError', 'ERROR_TYPE'),
('Mandisa', 'VARIABLE')

These tuples serve as placeholders that correspond to the template elements presented in the enhanced error message.

3. Message Builder

The Message Builder, responsible for integrating all the components, is implemented in process_traceback.py. This component fetches
predefined (enhanced) error message templates from a database and merges the content extracted in the structured representation into
contextually relevant positions. This results in a new enhanced or translated error message. The enhanced error message is then displayed
to the user.

** Package Functions **

clean_input(input_string)
This function processes the input string containing an error message. It is responsible for cleaning and formatting the input to prepare
it for further processing. Specifically, it removes unnecessary lines from the error message to focus on the essential information.

extract_elements(message)
The extract_elements function takes the cleaned error message as input and extracts error-specific information from it. It utilizes the
lexer and parser to identify and categorize elements in the error message. The output is a structured representation of the error message,
which includes tuples pairing extracted content with their corresponding token types.

generate_template(element_list, input_trace)
This function generates a template of the original error message with placeholders where elements have been extracted. It takes the
structured representation of the error message and the cleaned error message as inputs and creates a template that aligns extracted
elements with their positions in the original message.

generate_traceback(template, data_list)
The generate_traceback function replaces placeholders in the template with corresponding values from lists. It takes the template with
placeholders and a list of data pairs (values and their associated token types) as inputs. It then populates the placeholders with actual
values to create an improved error message.

fetch_improved_template(MESSAGE)
This function retrieves the improved template for a given error message from the SQLite database (error_msg.db). It searches for the
provided default error message template in the database and returns the corresponding improved template.

fetch_translated_template(MESSAGE)
Similar to fetch_improved_template, this function retrieves the translated template for a given error message from the SQLite database
(error_msg.db). It searches for the provided default error message template in the database and returns the corresponding translated
template.

process_default_traceback(input_trace)
The process_default_traceback function is the main entry point for error message processing. It orchestrates the entire workflow by
cleaning the input, extracting elements, generating a template, fetching improved or translated templates from the database, and 
finally generating an improved/ translated error message by replacing placeholders with actual values.

** Usage **
To use this package to process error messages:

1. Ensure that the required Python library (`ply`) is installed.

2. Place your Python script that may generate errors in the same directory as the package files.

3. Use the `catch_all_errors` function from `error_processing.py` to execute your Python script and capture its output, which may include
   error messages.

4. Pass the captured error message to the `process_default_traceback` function to generate an improved error message.


Example `main.py` script for running a submitted Python file and processing its error messages, while allowing the user to choose a language

preference for error messages:

```python
# Import the necessary functions
from process_traceback import catch_all_errors, process_default_traceback

# Adjust the path to the Python script appropriately
script_path = r'C:\Users\mandy\Documents\Honours\Project\TNZMAN002_Final_Project_Code\PyPly\Tasks\FizzBuzz.py'

# Attempt to execute the submitted Python script and capture its output (including errors)
error = catch_all_errors(script_path)

try:
    # Allow the user to choose a language preference for error messages
    language = input("Enter E or X for language preference for error messages\n(E) English\n(X) isiXhosa\n").upper()
    
    # Try to process and improve/ translate the error message
    improved_error_message = process_default_traceback(error, language)
    print(improved_error_message)

except Exception as e:
    # If there is an exception during the error processing, print the original error message
    print(error)

for the above example:

If your script has a syntax error then: 
   1. Choose an E or X to choose which language you want the error messages in (E for English, X for isiXhosa).
      1.1. code jumps to 3 below.

Else:
   2. If your function takes in input, then enter the relevant intput and press enter. Should your script contain an error, code jumps
      to 1.1 above.
      Else: If there is no error, the file the script will be run; step 3 below is not reached.

3. Captured error message will be passed to the process_default_traceback function from process_traceback.py to generate
   an improved/ translated error message.


# Database Management
To manage error message templates in the SQLite database, you can use the database_manager.py file. You can create 
functions to add, update, or retrieve error message templates based on default templates extracted from traceback
messages.

# License
This package is provided under the MIT License.

Feel free to customize and extend this package to suit your specific error message processing needs.